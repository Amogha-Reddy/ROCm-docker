# Build this dockerfile with `docker build -f hcc-lc-release-dockerfile -t roc/hcc .`

# To reduce container rebuild time, place commands least likely to change at top to
# most changing at bottom

# This builds the hcc compiler, and depends on an already existing rocr-runtime to be found
FROM ${rocr_name}
MAINTAINER Kent Knox <kent.knox@amd>

# Install dependencies required to build hcc
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
  build-essential \
  software-properties-common \
  curl \
  wget \
  python \
  libncurses5-dev \
  libelf-dev \
  libc++abi-dev \
  libc++-dev && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/*

# Explicitely install a newer version of git, a minimum of 2.10.0, so we benefit from --shallow-submodules flag
#RUN add-apt-repository ppa:git-core/ppa && \
#  apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
#  git && \
#  apt-get clean && \
#  rm -rf /var/lib/apt/lists/*

# These are all extra packages needed to build cmake with --system-libs
#  zlib1g-dev \
#  libcurl4-openssl-dev \
#  lzma-dev \
#  libbz2-dev \
#  libarchive-dev \
#  lib64expat1-dev \
#  libjsoncpp-dev \

# Download and install an up to date version of cmake, because compiling
# LLVM has implemented a requirement of cmake v3.4.4 or greater
ENV CMAKE_VER_MAJOR 3.6
ENV CMAKE_VER_MINOR ${CMAKE_VER_MAJOR}.2
ENV CMAKE_PREFIX /opt/cmake

# This installs the new cmake side-by-side with the old cmake using update-alternatives
RUN cd /usr/local/src && \
    curl -L https://cmake.org/files/v${CMAKE_VER_MAJOR}/cmake-${CMAKE_VER_MINOR}.tar.gz -o cmake-${CMAKE_VER_MINOR}.tar.gz && \
    tar -xf cmake-${CMAKE_VER_MINOR}.tar.gz && \
    cd cmake-${CMAKE_VER_MINOR} && \
#    ./bootstrap --prefix=${CMAKE_PREFIX} --system-libs && \
    ./bootstrap --prefix=${CMAKE_PREFIX} && \
    make -j $(nproc) && \
    make install && \
    cd .. && rm -rf cmake-${CMAKE_VER_MINOR} && \
    update-alternatives --install /usr/local/bin/cmake cmake ${CMAKE_PREFIX}/bin/cmake 80 --slave /usr/local/bin/ccmake ccmake ${CMAKE_PREFIX}/bin/ccmake --slave /usr/local/bin/cpack cpack ${CMAKE_PREFIX}/bin/cpack --slave /usr/local/bin/ctest ctest ${CMAKE_PREFIX}/bin/ctest --slave /usr/local/share/cmake-${CMAKE_VER_MAJOR} share-cmake-${CMAKE_VER_MAJOR} ${CMAKE_PREFIX}/share/cmake-${CMAKE_VER_MAJOR} # --slave /usr/local/bin/cmake-gui cmake-gui ${CMAKE_PREFIX}/bin/cmake-gui

# App specific environment variables; modify path to add hcc and repo commands
ENV HCC_BUILD_PATH=/usr/local/src/hcc-lc
ENV PATH=${PATH}:${hcc_lc_volume}bin:~/bin

# While working out build issues, it usually pays off to seperate the following build steps into multiple build statements
# to save time having to build each build component, if rebuilding the image multiple times
# It will result in about double the image size, and the final dockerfile should always build the compiler in 1 run statement

# Compiling hcc-lc requires a custom build tool
RUN mkdir -p ~/bin && \
    curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > ~/bin/repo && \
    chmod a+x ~/bin/repo

# This is a long series of build steps, all listed under one RUN statement to keep image size down
# Build hcc-lc, install to /opt/rocm
RUN mkdir -p ${HCC_BUILD_PATH} && \
  cd ${HCC_BUILD_PATH} && \
  ~/bin/repo init --depth=1 -u https://github.com/RadeonOpenCompute/HCC-Native-GCN-ISA.git -b ${repo_branch_hcc_lc} && \
  ~/bin/repo sync && \

  # build amd-common LLVM/LLD/Clang
  cd ${HCC_BUILD_PATH}/llvm && \
  mkdir -p build && \
  cd build && \
  cmake \
    -DCMAKE_INSTALL_PREFIX=${hcc_lc_volume} \
    -DCMAKE_BUILD_TYPE=${build_config} \
    -DLLVM_TARGETS_TO_BUILD="AMDGPU;X86" \
    -DLLVM_APPEND_VC_REV=ON .. && \
  make -j $(nproc) install && \

  # build ROCm-Device-Libs with amd-common Clang
  cd ${HCC_BUILD_PATH}/ocml/ && \
  mkdir -p build && \
  cd build && \
  CC=${HCC_BUILD_PATH}/llvm/build/bin/clang cmake \
    -DCMAKE_INSTALL_PREFIX=${hcc_lc_volume} \
    -DCMAKE_BUILD_TYPE=${build_config} \
    -DAMDHSACOD=/opt/rocm/bin/amdhsacod \
    -DLLVM_DIR="${HCC_BUILD_PATH}/llvm/build" \
    .. && \
  make -j $(nproc) install && \

  # build HCC with ROCm-Device-Libs
  # this deletes the code synced from repo, and uses git clone --recursive to get all dependent modules
  cd  ${HCC_BUILD_PATH} && \
  rm -rf hcc && \
#  git clone --recursive --depth 1 --shallow-submodules -b ${repo_branch_hcc_lc} https://github.com/RadeonOpenCompute/hcc.git && \
  git clone --recursive --depth 1 -b ${repo_branch_hcc_lc} https://github.com/RadeonOpenCompute/hcc.git && \
  cd hcc && \
  mkdir -p build && \
  cd build && \
  cmake \
    -DCMAKE_INSTALL_PREFIX=${hcc_lc_volume} \
    -DCMAKE_BUILD_TYPE=${build_config} \
    -DROCM_DEVICE_LIB_DIR=${hcc_lc_volume}/lib \
#    -DHSA_AMDGPU_GPU_TARGET="AMD:AMDGPU:7:0:1;AMD:AMDGPU:8:0:1;AMD:AMDGPU:8:0:3" \
    -DHSA_AMDGPU_GPU_TARGET="AMD:AMDGPU:7:0:1;AMD:AMDGPU:8:0:3" \
    .. && \
  make -j $(nproc) world && \
  make install && \
  git log -n 3 > ${hcc_lc_volume}/git-stamp.log && \
  ln -sr ${hcc_lc_volume} ${rocm_volume}/hcc && \
  ln -sr ${hcc_lc_volume}/include/ ${rocm_volume}/include/hcc && \
  ln -sr ${hcc_lc_volume}bin/hcc ${rocm_volume}bin/hcc && \
  ln -sr ${hcc_lc_volume}bin/hcc-config ${rocm_volume}bin/hcc-config && \
  ${hcc_lc_cleanup} \
  echo "${hcc_lc_volume}lib" >> /etc/ld.so.conf.d/hcc-lc.conf && \
  ldconfig

# The following downloads and builds the latest HiP using this new compiler
# Build hip, install to /opt/rocm
RUN mkdir -p /usr/local/src && cd /usr/local/src && \
  git clone --depth 1 -b developer-preview https://github.com/GPUOpen-ProfessionalCompute-Tools/HIP.git && \
  mkdir -p hip-build && cd hip-build && \
  cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=-DDISABLE_COPY_EXT=1 ../HIP && \
  make install && \
  ln -sr ${rocm_volume}hip/bin/hipcc ${rocm_volume}bin/hipcc && \
  ln -sr ${rocm_volume}hip/bin/hipconfig ${rocm_volume}bin/hipconfig && \
  ln -sr ${rocm_volume}hip/bin/hipify ${rocm_volume}bin/hipify && \
  cd .. && rm -rf hip-build && rm -rf HIP
